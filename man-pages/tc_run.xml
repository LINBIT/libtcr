<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<refentry>
  <xi:include href="product.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
  <refmeta>
    <refentrytitle>tc_run</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo class="manual">libtcr documentation</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>tc_run</refname>
    <refname>tc_init</refname>
    <refname>tc_worker_init</refname>
    <refname>tc_worker_init</refname>
    <refname>tc_set_diagnostic_fn</refname>
    <refname>tc_set_stack_size</refname>

    <refpurpose>libtcr initialization</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>#include &lt;tc/threaded_cr.h&gt;</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_run(void (*<replaceable>func</replaceable>)(void *), void *<replaceable>data</replaceable>, char* <replaceable>name</replaceable>, int <replaceable>nr_of_workers</replaceable>);</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_init();</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_worker_init();</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_set_diagnostic_fn(diagnostic_fn <replaceable>f</replaceable>);</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_set_stack_size(int <replaceable>size</replaceable>);</command>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>The most convenient way of using the tc-library is to call 
      <option>tc_run()</option>. Alternatively call <option>tc_init()</option>
      once, create your thread pool, call <option>tc_worker_init()</option> and 
      <option>tc_scheduler()</option> in each thread of the pool.
    </para>
    <para>
      <option>tc_run()</option> creates <replaceable>nr_of_workers</replaceable> threads using
      <citerefentry><refentrytitle>pthread_create</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      and calls tc_scheduler() in these threads. After that it calls the
      provided <replaceable>func</replaceable>. When <replaceable>func</replaceable>
      returns the thread pool of worker threads gets destroyed.
    </para>
    <para>
        The value of <replaceable>nr_of_workers</replaceable> is a bit 
        critical; for values bigger than the number of allowed nodes (CPU 
        cores) some parts of the code might hog CPU. In this case a warning is 
        printed via the diagnostic function.
        We recommend to pass zero as <replaceable>nr_of_workers</replaceable>; 
        then <option>tc_run()</option> will look at the cpu affinity mask of 
        the process and determine the correct number of threads itself.
    </para>
    <para>
      <option>tc_set_diagnostic_fn()</option> can be used to alter the target of the tc-library's
      emergency messages. By default they are written to <option>stderr</option>.
      This function is one of the few functions that might be called before
      <option>tc_init()</option> was called. In fact, it is recommended
      to call it before calling <option>tc_init()</option> because
      the tc-library might terminate the program if for example
      <citerefentry><refentrytitle>epoll_create</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      fails.
    </para>
    <para>
      <option>tc_set_stack_size()</option> sets the stack size of tc_threads created later on with
      <citerefentry><refentrytitle>tc_thread_new</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      or
      <citerefentry><refentrytitle>tc_thread_pool_new</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      .
    </para>
  </refsection>
  <refsection>
    <title>Example</title>

    <para>
      <programlisting format="linespecific">static void starter(void *unused)
{
	struct tc_thread *a, *b;

	a = tc_thread_new(func, "a", "func_a");
	b = tc_thread_new(func, "b", "func_b");

	tc_thread_wait(a);
	tc_thread_wait(b);
}


int main()
{
	tc_run(starter, NULL, "test", sysconf(_SC_NPROCESSORS_ONLN));
	return 0;
}
</programlisting>
      </para>
  </refsection>
  <xi:include href="author.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</refentry>
