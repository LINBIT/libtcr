<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<refentry>
  <xi:include href="product.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
  <refmeta>
    <refentrytitle>tc_thread_pool_new</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo class="manual">libtcr documentation</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>tc_thread_pool_new</refname>
    <refname>tc_thread_pool_wait</refname>
    <refname>tc_thread_num_in_pool</refname>

    <refpurpose>libtcr thread bundle functions</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>#include &lt;tc/threaded_cr.h&gt;</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>void tc_thread_pool_new(struct tc_thread_pool *<replaceable>threads</replaceable>, void (*<replaceable>func</replaceable>)(void *), void *<replaceable>data</replaceable>, char* <replaceable>name</replaceable>, int <replaceable>excess</replaceable>);</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>enum tc_rv tc_thread_pool_wait(struct tc_thread_pool *<replaceable>threads</replaceable>);</command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>int tc_thread_worker_nr(struct tc_thread *<replaceable>tc</replaceable>);</command>
    </cmdsynopsis>

  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>
      <option>tc_thread_pool_new()</option> creates a new user space thread on each system
      level thread. <replaceable>Data</replaceable> gets passed to <replaceable>func</replaceable>
      which is called in each of the created threads. The string passed as 
      <replaceable>name</replaceable> should contain the "%d" sequence. It gets replaced
      by consecutive numbers. If <replaceable>excess</replaceable> is greater than 0 than
      <replaceable>excess</replaceable> additional number of threads are created. If
      <replaceable>excess</replaceable> is less than 0, that number less than number
      of system level worker threads are created in the pools of user space threads.
    </para>

    <para>
      <option>tc_thread_pool_wait()</option> waits for the termination of all threads 
      of the thread pool <replaceable>threads</replaceable>.
    </para>

    <para>
      Threads in a pool get numbered within the pool;
      <option>tc_thread_worker_nr</option> returns the number of the worker
      thread that this <replaceable>tc</replaceable> is assigned to. This is a
      constant <option>&gt;=0</option> for the first
      <replaceable>nr_of_workers</replaceable> within a pool (see
      <option>tc_run()</option>), or may be initially <option>&lt;0</option>
      for excessive and unbound threads
      (ie. started via <option>tc_thread_new()</option>).
    </para>
    <para>
      If <replaceable>tc</replaceable> is <option>NULL</option>, the value for
      the current tc_thread is returned.
    </para>


  </refsection>
  <xi:include href="author.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</refentry>
